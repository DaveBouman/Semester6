version: "3.7"

services:

  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
    - "80:80"
    - "443-443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - platform
    depends_on:
    - user-service
    - message-service
    - adminer

  redis:
    container_name: redis
    image: "redis:alpine"
    ports:
      - "6379:6379"
    networks:
      - platform

  postgres:
    container_name: postgres
    image: "postgres"
    ports:
      - "5432:5432"
    networks:
      - platform
    volumes:
      - postgresql-data:/var/lib/postgresql
    environment:
      - POSTGRES_PASSWORD=admin
      - POSTGRES_USER=admin
      - POSTGRES_DB=db

  placement:
    container_name: placement
    image: "daprio/dapr"
    command: ["./placement", "-port", "50006"]
    ports:
      - "50006:50006"
    networks:
      - platform

  adminer:
    container_name: adminer
    image: adminer
    restart: always
    networks:
      - platform
    ports:      
      - "8080:8080"

  message-service:
    build: ./messageService
    hostname: message-service
    env_file:
      - ./messageService/.env
    ports:
      - "50000:50000"
      - "3002:3002"
      - "9229:9229"
    networks:
      - platform
    volumes:
      - ./messageService:/src
    depends_on:
      - redis
      - placement
      - postgres

  message-service-dapr:
    image: "daprio/dapr:edge"
    container_name: message-service-dapr
    command: [
     "./daprd",
     "-app-id", "user-service-dapr",
     "-app-port", "3003",
     "-dapr-grpc-port","5000",
     "-dapr-http-port","53002",
     "-placement-host-address", "placement:50006", # Dapr's placement service can be reach via the docker DNS entry
     "-components-path", 
     "./components",
     ]
    volumes:
        - "./components/:/components" # Mount our components folder for the runtime to use
    depends_on:
      - message-service
    network_mode: "service:message-service"

  user-service:
    build: ./userService
    container_name: user-service
    env_file:
      - ./userService/.env
    ports:
      - "50001:50001"
      - "3001:3001"
      # - "9229:9229"
    networks:
      - platform
    volumes:
      - ./userService:/src
    depends_on:
      - redis
      - placement
      - postgres

  user-service-dapr:
    image: "daprio/dapr:edge"
    container_name: user-service-dapr
    command: [
     "./daprd",
     "-app-id", "user-service-dapr",
     "-app-port", "3000",
     "-dapr-grpc-port","50001",
     "-dapr-http-port","53001",
     "-placement-host-address", "placement:50006", # Dapr's placement service can be reach via the docker DNS entry
     "-components-path", 
     "./components",
     ]
    volumes:
        - "./components/:/components" # Mount our components folder for the runtime to use
    depends_on:
      - user-service
    network_mode: "service:user-service" 
    
networks:
  platform:

volumes:
  postgresql-data:
  nodemodules: {}

#  database:
#     image: mysql
#     restart: always
#     command: --default-authentication-plugin=mysql_native_password
#     ports:
#       - "3305:3306"
#     networks:
#       - platform
#     volumes:
#       - mysql-data:/var/lib/mysql
#     environment:
#       MYSQL_USER: "admin"
#       MYSQL_ROOT_PASSWORD: "admin"
#       MYSQL_PASSWORD: "admin"
#       MYSQL_DATABASE: "test"

  # zookeeper:
  #   image: wurstmeister/zookeeper
  #   container_name: zookeeper
  #   networks:
  #     - platform
  #   ports:
  #     - "2181:2181"

  # kafka:
  #   image: wurstmeister/kafka
  #   depends_on:
  #     - zookeeper
  #   networks:
  #     - platform
  #   container_name: kafka
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_LISTENERS: PLAINTEXT://kafka:9092 
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
